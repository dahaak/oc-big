{"name":"OC-Big","tagline":"Big Data Integration into OpenClinica's eCRFs","body":"**OC-Big** is an open source software extension for the electronic data capture system OpenClinica (https://www.openclinica.com/) and has been developed at the Department of Medical Informatics, Uniklinik RWTH Aachen, Germany. OC-Big aims at enriching OpenClinica by a new module for convenient and context-related data integration of large volume files into electronic case report forms (eCRFs). OC-Big is developed using JavaScript (JQuery) and PHP, and is based on other open source projects, namely jQuery File Upload ([http://blueimp.github.io/jQuery-File-Upload/](http://blueimp.github.io/jQuery-File-Upload/)) and zip.js ([http://gildas-lormeau.github.io/zip.js/](http://gildas-lormeau.github.io/zip.js/)).\r\n\r\n![Screen 1](https://community.openclinica.com/sites/fileuploads/akaza/cms-community/contribprojects/screenshot/20641/oc_db_1.png)\r\n\r\n![Screen 2](https://community.openclinica.com/sites/fileuploads/akaza/cms-community/contribprojects/screenshot/20641/oc-db_1.png)\r\n\r\n\r\n# Features\r\n * Upload of large volume date (only limited by server’s storage space)\r\n * Chunking of data files into multiple parts to exceed browser’s upload limit of 4 GB\r\n * Support of multiple selection of files and queue processing\r\n * User-friendly drag & drop support\r\n * Data storage with unique filenames including study, event and subject context\r\n * Automatic compression and decompression for transfer (optional)\r\n * Not affected by !OpenClinica’s session timeout\r\n * Easy to integrate in and configure through eCRFs\r\n\r\n# Installation Guide\r\n\r\n## System Requirements\r\nThe following system requirements represent the system configuration of our server. In general, it should also work with similar components.\r\n\r\n * Web server (e.g. Debian GNU/Linux 6.0)\r\n * OpenClinica 3.1.2 with requirements, e.g. PostreSQL, Tomcat (probably newer OpenClinica versions also working, but not tested yet)\r\n * Apache 2\r\n * PHP 5 (with PECL Zip 1.10.2)\r\n * Apache Tomcat Connector (mod_jk)\r\n * Web browser, tested with Firefox >19 and Google Chrome >26 (Last tested: Firefox 34.0.5, Chrome 39.0.2171.95m)\r\n\r\n## Installation\r\n\r\n**Attention:**\r\nIn the current version, OpenClinica has to be configured to be running through the Apache (Port 80) instead of Tomcat (Port 8080) to get OC-Big working. Since OC-Big has to be running in Apache, cross domain calls would be performed during communication with OpenClinica. These calls are usually forbidden by the browsers and cannot be executed. \r\nThe following manual assumes that OpenClinica should be also running through Apache and explains how this can be set up (step 3).\r\n\r\n\r\n### 1. Install OpenClinica\r\n\r\nIf not already done, install OpenClinica with all requirements. Installation guides for Linux/Windows can be found [here](https://docs.openclinica.com/installation). The following manual is based on a Linux (Debian) installation of !OpenClinica.\r\n\r\n### 2. Install Apache\r\n\r\nPointing the web browser to [http://localhost/](http://localhost/) takes us to the default apache page confirming that apache has been installed. If not, the command \r\n\r\n`aptitude install apache2`\r\n\r\nwill catch apache2 from the debian packages and install it. \r\n\r\n### 3. Install Apache Tomcat Connector\r\n\r\nAs explained in the introduction, we now have to configure OpenClinica to be additionally running in Apache. For this we have to forward Apache calls on Port 80 to our OpenClinica location in Tomcat on Port 8080 via mod_jk. \r\n\r\nFirst we install mod_jk\r\n\r\n`aptitude install libapache2-mod-jk`\r\n\r\nAfter this, we configure the workers.properties file in _/etc/libapache2-mod-jk_. It should look like this:\r\n\r\n`workers.tomcat_home=/usr/share/tomcat7\r\nworkers.java_home=/usr/lib/jvm/default-java\r\nps=/\r\nworker.list=ajp13_worker\r\nworker.ajp13_worker.port=8009\r\nworker.ajp13_worker.host=localhost\r\nworker.ajp13_worker.type=ajp13\r\nworker.ajp13_worker.lbfactor=1\r\nworker.loadbalancer.type=lb\r\nworker.loadbalancer.balance_workers=ajp13_worker`\r\n\r\nBut, `workers.tomcat_home` and `workers.java_home` have to be adapted to your Tomcat/Java home directories.\r\n\r\nAfter this, we configure Tomcat in so far, that it will allow mod_jk calls. For this, we uncomment the following lines in Tomcat’s _server.xml_ in _/conf/_ of your Tomcat root folder:\r\n\r\n`<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />`\r\n\r\nIn the next step, we have to load OpenClinica from Tomcat into Apache. For this, we modify the _jk.conf_ in _/etc/apache2/mods-available_ and add the following lines\r\n\r\n`\tJkMount /openclinica/* ajp13_worker\r\n\tJkMountCopy All`\r\n\r\nIn the first line our OpenClinica web app folder _/openclinica/_(adapt this line here, if you changed the name) and all its sub-content is released for Apache forwarding.\r\nThe second lines says that this configuration should be automatically adapted to all (virtual)-hosts defined in Apache.\r\n\r\nNow, we just have to restart Apache and Tomcat. After this our OpenClinica installation should be available at [http://hostname/OpenClinica](http://hostname/OpenClinica). In addition, it should be still available at [http://hostname:8080/OpenClinica](http://hostname:8080/OpenClinica), but when accessing it this way, OC-Big might not work due to cross domain calls.\r\n\r\n\r\n### 4. Install PHP\r\n\r\nPHP5 is required for OC-Big to process transferred files on server side. This can be installed along with the php apache module by\r\n\r\n`aptitude install php5 libapache2-mod-php5`\r\n\r\nAfter this, a server restart must be done\r\n\r\n`/etc/init.d/apache2 restart`\r\n\r\n### 5. Install PHP Zip Extension\r\n\r\nZip functionality is not usually enabled with standard php installations. To check if the zip functionality is enabled, the _phpinfo()_ function can be used. PHP's zip functionality has to be enabled by \r\n\r\n # compiling php with the _--enable-zip_ option OR \r\n # install it via PECL, e.g. install PECL, modify the _php.ini_ file and uncomment zip.so. \r\n\r\n### 6. Extract oc-big-112.zip to a temporary folder\r\n\r\nThe zip file contains the directories\r\n * bin: PHP modules\r\n * css: Cascading Style Sheets (CSS) files for design\r\n * images: Images used in user interface\r\n * js: Used Javascript libraries\r\n * lib: Original source code of used projects and libraries\r\n * openclinica: !OpenClinica files including _OC-Big.xls_ as demo eCRF\r\n * server: Server side PHP code to process transferred files\r\n * templates: HTML templates for client side\r\n\r\n\r\n### 7. Copy contents on server\r\n\r\nCopy the complete content of oc-big-112.zip into a folder in your Apache's default document root directory (e.g /var/www/oc-big-112/).\r\n\r\n### 8. Set folder permissions\r\n\r\nIn the directories _/server/php/_ and _/server/php/files/_ the transferred files are stored, so these directories need write permissions (777).\r\n\r\n### 9. Copy Pop-Up call script into your OpenClinica Tomcat folder\r\n\r\nThe script _/openclinica/showImageUpload.js_ has to be copied into your OpenClinica Tomcat folder. After a backup, create a folder (e.g. /javascripts/) inside the OpenClinica webapp folder and copy the script file here. This script has to be available inside Tomcat, because it is called from OpenClinica itself.\r\n\r\n### 10. Customize eCRF\r\n\r\nOpen the /openclinica/OC-Big.xls sample eCRF and modify it. Here a sample integration for image upload into the eCRF is already available. An overview of the parameters, which can be generally set in the eCRF is given below.\r\n\r\n### 11. Install eCRF\r\n\r\nInstall the eCRF as usual in OpenClinica.\r\n\r\n### 12. Ready!\r\n\r\n## Settings\r\nOC-Big can be configured directly in the eCRF by modification of the upload button tag. In the sample eCRF it is as follows:\r\n\r\n`<span class=\"uploadButton\" widthQ=\"240px\" fileType=\"png\" fileCount=\"1\" imgWidth=\"240px\" imgFloat=\"right\" imgDefault=\"/openclinica/crfImages/default.png\" apacheBD=\"oc-big-112\" savePath=\"/var/www/oc-big-112/server/php/final/” token=\"test1234!\"/>`\r\n\r\nYou can modify the following parameters to adapt OC-Big to your needs:\r\n\r\n * **fileType:** Allowed file types for upload. Multiple types can be seperated by comma (e.g. jpg, png). *Note:* On changing this you currently also have to adapt the _content-type_ in the _download.php_ file to get downloads working as well.\r\n * **fileCount:** Maximum number of allows files.  \r\n * **imgDefault:** Location of default image showed in the eCRF beside of the OC-Big button.\r\n * **apacheBD:** Name of the OC-Big instance, which is used. If your OC-Big code is in a folder named \"oc-big-112\" (as described in the manual), \"oc-big-111\" has to be set here.\r\n * **savePath:** Path where transferred files are finally stored. Note: On changing this you propbably also have to adapt the extraction of the filenames in _download.php_.\r\n * **token:** Token to avoid calls of OC-Big from outside the eCRF. The token value in the eCRF and in _settings.php_ have to be the same. The longer this value, the lower the risk of unwanted OC-Big calls from outside. *Note:* Please change the token value before integration. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}